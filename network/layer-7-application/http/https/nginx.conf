# 这个 Nginx 配置支持以下的 HTTP + TLS 模式：
# 1. **HTTP/1.1 + TLS 1.2**: 默认情况下，Nginx 支持 HTTP/1.1。在这个配置中，`ssl_protocols TLSv1.2 TLSv1.3;` 行启用了 TLS 1.2，所以 HTTP/1.1 + TLS 1.2 是被支持的。
# 2. **HTTP/1.1 + TLS 1.3**: 同样，由于默认支持 HTTP/1.1 并且启用了 TLS 1.3，所以 HTTP/1.1 + TLS 1.3 也是被支持的。
# 3. **HTTP/2 + TLS 1.2**: 在这个配置中，`listen 443 ssl http2;` 和 `listen [::]:443 ssl http2;` 行启用了 HTTP/2。结合启用的 TLS 1.2，HTTP/2 + TLS 1.2 是被支持的。
# 4. **HTTP/2 + TLS 1.3**: 同样，由于启用了 HTTP/2 和 TLS 1.3，所以 HTTP/2 + TLS 1.3 也是被支持的。

# generated 2024-04-14, Mozilla Guideline v5.7, nginx 1.25.1, OpenSSL 3.0.2, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.25.1&config=intermediate&openssl=3.0.2&guideline=5.7
server {
  listen 80 default_server;
  listen [::]:80 default_server;

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name www.example.com;

  ssl_certificate /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
  ssl_session_tickets off;

  # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
  # openssl dhparam -out dhparam.pem 2048
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  # intermediate configuration
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
  ssl_prefer_server_ciphers off;

  # HSTS (ngx_http_headers_module is required) (63072000 seconds)
  add_header Strict-Transport-Security "max-age=63072000" always;

  # OCSP stapling, default is on
  ssl_stapling off;
  ssl_stapling_verify off;

  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  #`ssl_trusted_certificate` 指令在 Nginx 配置文件中用于指定一个包含所有用于验证 OCSP 响应的根证书和中间证书的文件。
  # 这个文件通常来自于你的 SSL 证书提供商。当你从一个证书颁发机构（CA）购买 SSL 证书时，他们通常会提供一个包含根证书和所有中间证书的文件。你可以直接使用这个文件，或者将其内容复制到你自己的文件中。
  # 如果你使用的是自签名证书，那么你的服务器就是自己的根证书颁发机构。在这种情况下，你可以直接使用你的自签名证书作为 `ssl_trusted_certificate` 的值。
  ssl_trusted_certificate /etc/nginx/ssl/ca.crt;

  # replace with the IP address of your resolver
  resolver 127.0.0.1;


  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
  }
}
